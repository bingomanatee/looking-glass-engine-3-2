import { distinctUntilChanged, filter, map } from 'rxjs/operators';
import { Subject } from 'rxjs';
import { proppify } from '@wonderlandlabs/propper';
import { ID } from './absent';
import Change from './Change';
import pick from './pick';
import Base from './Base';

/**
 * This decorates and expands a value (standard) Subject
 * into its value along with metadata generated by its value.
 * It expresses the value,
 * the last valid value (that did not generate metadata)
 * the meta of the current value.
 *
 * it can optionally have a preprocessing filter that sanitizes values before they are
 * expressed as the next value, to for instance destructure arrays & objects into new references;
 */

export default class Stream extends Base {
  /**
   * @param store {ValueStore}
   * @param name {String}
   * @param initialValue any
   * @param pre {function | falsy} an optional function to pre-transform input
   */
  constructor(store, name, initialValue = null,
    pre = ID) {
    super(initialValue);
    this.name = name;
    this.store = store;
    this.pre = pre;
    this.next(initialValue);
    this._initialized = true;
  }

  get value() {
    return this.subject.value;
  }

  subscribe(...methods) {
    const sub = this.subject.subscribe(...methods);
    this.subSets.add(sub);
    return sub;
  }

  complete() {
    this.subject.complete();
    this.changes.complete();
    super.complete();
  }

  next(value) {
    if (this.done) {
      return;
    }
    this._reset();
    const change = new Change(this, value);
    try {
      change.nextValue = this.pre(value, this);
    } catch (error) {
      change.thrown = error;
      error.change = change;
      change.thrownAt = 'pre';
    }

    if (!change.thrown) {
      this.subject.next(change.nextValue);
    }
    Object.assign(change, pick(this, 'errors', 'notes'));

    this.store.next(change);
    if (change.thrown) throw change.thrown;
  }

  _reset() {
    this.errors = [];
    this.notes = null;
  }
}

proppify(Stream)
  .addProp('errors', () => ([]), 'array')
  .addProp('notes', null)
  .addProp('pre', ID, 'function')
  .addProp('changes', () => new Subject());
