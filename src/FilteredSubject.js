import {
  map,
} from 'rxjs/operators';
import { BehaviorSubject } from 'rxjs';
import MetaList from './MetaList';
import Meta from './Meta';

/**
 * This decorates and expands a value (standard) Subject
 * into a stream of errors generated by its value.
 * It tracks the last non-errored value,
 * the errors of the current value,
 * and the last valid value (considered the current value).
 *
 */
export default class FilteredSubject {
  constructor(initialValue = null, filters) {
    this.value = initialValue;
    this._base = new BehaviorSubject(initialValue);
    this._metaList = new MetaList(filters);
    this.lastValid = this._metaList.annotate(initialValue, this).length ? undefined : initialValue;

    this._stream = this._base.pipe(
      map((value) => {
        const meta = this._metaList.annotate(value, this);
        if (!meta.length) {
          this.lastValid = value;
        }
        return { value, meta, lastValid: this.lastValid };
      }),
    );
  }

  addMeta(test, name = '', order = 1) {
    this._metaList.add(new Meta(test, name, order));
  }

  get stream() {
    return this._stream;
  }

  subscribe(...methods) {
    this._stream.subscribe(...methods);
  }

  next(value) {
    this._base.next(value);
  }

  complete() {
    this._base.complete();
  }
}
