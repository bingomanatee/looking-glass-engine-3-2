{"title":"Validators","content":"# Validators\n\n`validators(name, fn, override = false)` is a registry for validation functions, There are a few \n\"starter\" validators for common tests. In earlier editions the entire is.js module\nwas used to handle named tests but the bundle size got so big, and validators \nis a stand-in for that. \n\nThere are a few pre-loaded tests:\n\n* 'string'\n* 'number'\n* 'nan'\n* 'integer'\n* 'array'\n* 'object'\n\nfor really basic type checking. Feel free to add your own. \n\nFair warning: validators will throw an error if you try to redefine a validator without\nthe third argument being true. \n\nvalidators curries if the second argument is present. so if it doesn't drive you nuts\nyou can call:\n\n```javascript\n\nvalidators('odd', (v) => ((v + 1) % 2)  ? 'value must be odd' : false)\n('even', (v) => v % 2 ? false : 'value must be even')\n('square', (v) => Math.sqrt(v) % 1 ? 'value must be a perfect square' : false);\n\n```\n\nThis is used in conjunction with defining properties or ValueStreams:\n\n```javascript\n\nconst coords = new ValueStream('coords')\n.property('x', 'number')\n.property('y', 'number')\n.property('z', 'number')\n\n```"}
