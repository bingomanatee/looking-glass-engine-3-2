{"title":"Value","content":"# Value\n\nThe Value is a name-value pair. Its not particularly useful but it does isolate some of the fundamental\nproperties of the other classes into a basic subclass. \n\n* It has no children or default requirements/restrictions on its value. \n* It can have a filter to restrict input. \n* It cannot be updated externally. \n\nSetting the value to an invalid item will throw; and if this is true of the initial value,\n*creating* a Value with an invalid initial value (based on its validator) will throw. \n\nValue is *not* a stream: it is simply the core validation/value/name functionality underpinning\nthe other classes. \n\n## constructor\n`(name: string, value?, filter? : function)`\n\n## .name \n`{String`\nName must be a valid javascript property name. \n\n## .value\ncan be any type. note - if not initialized to a value, it is internally\nannotated with a symbol ABSENT. \n\n## .filter\ncan be:\n* absent/falsy; all values are acceptable\n* a string: name of a method registered in validators\n* an array of the above\n\nfunctional tests express errors - valid values require a falsy return. \nThe first argument to the function is the value. The second one is an array\nof results from previously returned errors if the filter is an array:\n\n```javascript\nfunction isOddNumber(n, errors) {\n    if (errors.length) {\n      return false; // don't test oddness if the value is not a number.\n    }\n    \n    if ((n + 1) % 2) {\n      return 'must be an odd number';\n    }\n    return false;\n}\n\nconst ss2 = new Value('oddNum', 1, ['number', isOddNumber]);\n```\n\nArray filters let you ensure type sanity before applying business logic, or to \ndevelop and mix a suite of validation computations. The logical union of an array\nof tests is AND as in, every test in the array must pass or the validation is \nconsidered a failure. Unlike javascript && logic, every test in the array is always\nprocessed regardless of the outcomes of the previous tests. \n\n## validate\n`(value = ABSENT singleError? = false)`\n\ntests a value against the filter. returns an array of errors - empty if valid. \nif singleError, returns the first error."}
