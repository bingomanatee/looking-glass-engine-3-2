{"title":"ValueStream","content":"#ValueStream\n `<= Value`\n\nValueStream is a streaming version of Value. \n\n* It has the same constructor (and as a child class, methods) as `Value`. \n* It is an Observable, with the rx.js subscribe method available\n* You can set its' value with `.next(value)`\n\n## next\n`(value, attrs?:Object) : Message | Error`\n\nUnlike Value, ValueStream has a public method to update errors.\n`next(value)` will return a string if the value fails validation, \nand will leave its value unchanged. \n\nIf you want to augment the message that next uses to transmit state \n(such as making it transactional with {trans: true) you can set an object parameter set for the \nsecond argument. \n\nIn extreme failures, a standard error will be emitted; it will still \nhave an `.error` property for consistency. \n\n## nextPromise\n`(value, attrs?:Object) : Message | Error`\n\nuses the async conventions to allow you to trigger a handler when the \nnext attempt fails. Generally this is because you attempted to assert an invalid value.\nnote, the change is still immediate/synchronous. \n\n## subscribe\n`(onChange, onError, onComplete)`\n\nThis is the Observable method; it follows `rx.js` conventions EXCEPT that onError\ngets more messages than is typical. the rx.js standard is that onError is, like a \nfailed promise, the death rattle of a stream; and gets zero or one messages. \n\nIn LGE ValueStreams emit to onError many times, \nincluding when you try to set a value to an invalid value. \n\nIt may be useful to actually use onError to change field \nvalues to the user-attempted values and display errors on validation failure. \nthis will create dissonance between the form displayed values and the stored values\nbut as this only exists prior to submission it might be a good convention to try out. \n\nsubscribe listens to the `.$updateStream`; if you want to do rxjs operations on updates,\npipe this stream. \n\n## complete\n`()`\n\nthis is part of the Observable interfaces. It completes all subscriptions. `.next` \nat this point doesn't have any effects after completion. \n\n## .$requests\n`stream`\n\nordinarily an internal stream that channels all the Messages prior to any\nerror testing/changes. Useful for debugging."}
