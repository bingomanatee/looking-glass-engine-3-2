{"title":"LGE","content":"# Looking Glass Engine 3.2\n\nThis incarnation of the Looking Glass Engine with a simpler interface for change tracking. \nLooking Glass 3 has a lot of moving parts and it is harder than necessary next infer functionality from source.\n\n## Improvements in 3.2\n\n### Throwable methods\n\nLGE 3.2 uses proxies more than LGE 3 did. As well, LGE 3 \"swallowed\" validation errors silently*, which\nin some cases is good, but in other cases might not be the desired behavior. \n\nLGE 3.2 *does* swallow errors by default, but you can configure methods to throw upon errors if you wish,\ninterrupting process flow on bad actions. \n\n### Transactional methods and greater exposure of the Transaction token\n\nMethods can be made transactional; this was true in 3 but not emphasized. \n\nAlso you can create and dispose of transactional tokens as you wish to, for insatnce, make parts\nof your methods transactional. \n\n## Architectural changes\n\n### Messages\n\nLGE 3.2 uses a concept of Messages as a class structure that filters through the streams,\nwhether the update stream or the error stream. Even transactions are Messages. \nThis allows for a more consistent set of annotation when information comes back \nor is polled in the debugging context. \n\n## Division of concerns\n\nthe ValueStream's functionality is now broken into three classes:\n\n1. the `Value` class is a pure name-value pair\n2. the `ValueStream` is a pure single-value construct that has no concept of actions. \n    It exists purely next report and be subscribable next, the value of its single action. \n    It has transactional locking and validation.\n3. The `ValueStore` is a collection of ValueStream properties, with actions.\n\nRemoving the polymorphic nature of ValueStreams allows each class next describe and \nfocus on its specialized purpose. \n____________________\n\n (*) semi-slently - they did emit through the errors watcher but did not interrupt the flow of code."}
